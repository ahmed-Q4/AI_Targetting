data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(.,-row_names.x, -row_names.y, -row_names.z))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(.,-row_names.x, -row_names.y))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(-row_names.x, -row_names.y))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), #-row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "row_names.", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), #-row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "row_names..", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), #-row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "roww_names.", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)),
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "row_names.", x = names(.)))
dbWriteTable(con, "data_set", data.set2)
dbWriteTable(con, "data_set", data.set2, overwrite = TRUE)
data.set2 <- dbReadTable(con, "data_set")
data.set3 <- na.omit(data.set2)
Test_years <- c(2015)
Training_years <- c(2008:2014)
regression_data <- data.set3[,c(59,1,3,9:54)] %>%
dplyr::filter(Year %in% Training_years) %>%
dplyr::select(-Symbol, -Date, -Year)
save.image("~/R_workspaces/AI_Targetting/Workspace_01.RData")
library(HighDimOut)
getDoParWorkers()
foreach::getDoParWorkers()
foreach::getDoParWorkers()
load("~/R_workspaces/AI_Targetting/Workspace_02_RegressionReady.RData")
context_var <- c(#"Symbol", "Year",  "Date",
"HasOptions", "SharkGrouping", "NumberHolders", "SharesOutstanding", "FSPermSecId")
Y_var_potential <- grep(pattern = "Position", x = names(data.set3), value = TRUE)
Y_var <- "Position_change"
X_var <-  setdiff(names(data.set3),
union(Y_var_potential, context_var))
# Identification of Training & Testing data set ------
# Random Sample vs Specific years for training set
RANDOM_TRAINING <- FALSE
FRACTION_TRAINING <- 0.75
if(RANDOM_TRAINING == TRUE) {
n_samples <- floor(NROW(data.set3) * FRACTION_TRAINING)
sample_ids <- sample.int(n = NROW(data.set3), size = n_samples, replace = FALSE)
Training_data_regression <- data.set3[sample_ids , c(Y_var, X_var)]
Test_data_regression     <- data.set3[-sample_ids, c(Y_var, X_var)]
} else {
# Splitting training/Testing
Years_dataset <- as.numeric(sort(unique(data.set3$Year)))
Test_years <- c(2015)
Training_years <- setdiff(Years_dataset, Test_years)
Training_data_regression <- dplyr::filter(data.set3, Year %in% Training_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
Test_data_regression <- dplyr::filter(data.set3, Year %in% Test_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
}
library(HighDimOut)
my_func <- function(x) {
print(unique(x$Year))
browser()
data_tmp <- x[, names(x) %in% c("Date", "Year", "Symbol")] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
names(data_tmp)
my_func <- function(x) {
print(unique(x$Year))
browser()
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
my_func <- function(x) {
print(unique(x$Year))
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
foreach::getDoParWorkers()
doParallel::registerDoParallel(cores=detectCores() - 1L)
doParallel::registerDoParallel(cores=Parallel::detectCores() - 1L)
doParallel::registerDoParallel(cores=parallel::detectCores() - 1L)
foreach::getDoParWorkers()
my_func <- function(x) {
print(unique(x$Year))
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
my_func <- function(x) {
print(unique(x$Year))
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.1)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
RANDOM_TRAINING <- FALSE
FRACTION_TRAINING <- 0.75
if(RANDOM_TRAINING == TRUE) {
n_samples <- floor(NROW(data.set3) * FRACTION_TRAINING)
sample_ids <- sample.int(n = NROW(data.set3), size = n_samples, replace = FALSE)
Training_data_regression <- data.set3[sample_ids , c(Y_var, X_var)]
Test_data_regression     <- data.set3[-sample_ids, c(Y_var, X_var)]
} else {
# Splitting training/Testing
Years_dataset <- as.numeric(sort(unique(data.set3$Year)))
Test_years <- c(2015)
Training_years <- setdiff(Years_dataset, Test_years)
Training_data_regression <- dplyr::filter(data.set3, Year %in% Training_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
Test_data_regression <- dplyr::filter(data.set3, Year %in% Test_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
}
# Classification data sets -----
Training_data_classification <- Training_data_regression
Training_data_classification$Buy_Sell <- as.factor(ifelse(Training_data_regression[,Y_var] > 0, "Buy", "Sell"))
Training_data_classification <- Training_data_classification[, -which(names(Training_data_classification) == Y_var)]
Test_data_classification <- Test_data_regression
Test_data_classification$Buy_Sell <- as.factor(ifelse(Test_data_regression[,Y_var] > 0, "Buy", "Sell"))
Test_data_classification <- Test_data_classification[, -which(names(Test_data_classification) == Y_var)]
library(FSelector)
install.packages("FSelector")
features_information.gain_classification <- information.gain(formula = Buy_Sell ~ ., data = Training_data_classification)
library(FSelector)
library(FSelector)
library(FSelector)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_111') # for 64-bit version
library(rJava)
library(FSelector)
features_information.gain_classification <- information.gain(formula = Buy_Sell ~ ., data = Training_data_classification)
features_gain.ratio_classification <- gain.ratio(formula = Buy_Sell ~ ., data = Training_data_classification)
features_randomForest <- random.forest.importance(formula = Buy_Sell ~ ., data = Training_data_classification, importance.type = 1)
sapply(Training_data_classification, function(x) class(x))
context_var <- c("Symbol", "Year",  "Date",
"HasOptions", "SharkGrouping", "NumberHolders", "SharesOutstanding", "FSPermSecId")
Y_var_potential <- grep(pattern = "Position", x = names(data.set3), value = TRUE)
Y_var <- "Position_change"
X_var <-  setdiff(names(data.set3),
union(Y_var_potential, context_var))
# Identification of Training & Testing data set ------
# Random Sample vs Specific years for training set
RANDOM_TRAINING <- FALSE
FRACTION_TRAINING <- 0.75
if(RANDOM_TRAINING == TRUE) {
n_samples <- floor(NROW(data.set3) * FRACTION_TRAINING)
sample_ids <- sample.int(n = NROW(data.set3), size = n_samples, replace = FALSE)
Training_data_regression <- data.set3[sample_ids , c(Y_var, X_var)]
Test_data_regression     <- data.set3[-sample_ids, c(Y_var, X_var)]
} else {
# Splitting training/Testing
Years_dataset <- as.numeric(sort(unique(data.set3$Year)))
Test_years <- c(2015)
Training_years <- setdiff(Years_dataset, Test_years)
Training_data_regression <- dplyr::filter(data.set3, Year %in% Training_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
Test_data_regression <- dplyr::filter(data.set3, Year %in% Test_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
}
# Classification data sets -----
Training_data_classification <- Training_data_regression
Training_data_classification$Buy_Sell <- as.factor(ifelse(Training_data_regression[,Y_var] > 0, "Buy", "Sell"))
Training_data_classification <- Training_data_classification[, -which(names(Training_data_classification) == Y_var)]
Test_data_classification <- Test_data_regression
Test_data_classification$Buy_Sell <- as.factor(ifelse(Test_data_regression[,Y_var] > 0, "Buy", "Sell"))
Test_data_classification <- Test_data_classification[, -which(names(Test_data_classification) == Y_var)]
features_information.gain_classification <- information.gain(formula = Buy_Sell ~ ., data = Training_data_classification)
features_gain.ratio_classification <- gain.ratio(formula = Buy_Sell ~ ., data = Training_data_classification)
features_randomForest <- random.forest.importance(formula = Buy_Sell ~ ., data = Training_data_classification, importance.type = 1)
View(features_randomForest)
View(features_gain.ratio_classification)
View(features_information.gain_classification)
install.packages("rmarkdown")
names(Training_data_classification)
head(data.set3)
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),  default.file = "~/.my.cnf", group = "local_intel")
dbListTables(con)
data.set <- dbReadTable(con, "SharkPositions_good") %>% dplyr::mutate(Date = as.Date(Date))
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
library(data.table)
library(bit64)
sec_ticker_exchange <- fread("~/R_workspaces/AI_Targetting/Data from Rob/h_security_ticker_exchange.txt", "|")
write.csv(sec_ticker_exchange, "security_ticker_exchange.csv", row.names = FALSE)
library(data.table)
library(bit64)
DT <- fread("~/R_workspaces/AI_Targetting/own_13f_holdings_hist_1.txt", sep = "|")
#DT <- DT[, ReportingDate := as.Date(REPORT_DATE)]
#pryr::mem_used()
#library(RMySQL)
#con <- dbConnect(RMySQL::MySQL(),  default.file = "~/.my.cnf", group = "local_intel")
#dbWriteTable(con, "Inst_Holdings_hist", DT)
sec_ticker_exchange <- fread("~/R_workspaces/AI_Targetting/Data from Rob/h_security_ticker_exchange.txt", "|")
#dbWriteTable(con, "sec_ticker_exchange", sec_ticker_exchange)
DT2 <- dplyr::left_join(DT,
dplyr::select(sec_ticker_exchange, TICKER_EXCHANGE, FREF_SECURITY_TYPE, FS_PERM_SEC_ID),
by = "FS_PERM_SEC_ID")
DT3 <- DT2 %>% dplyr::rowwise() %>%
dplyr::mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
strsplit(TICKER_EXCHANGE, split = "-")[[1]],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp),
strsplit(Symbol_tmp, split = "-")[[1]],
Symbol_tmp)) %>%
dplyr::ungroup() %>% dplyr::select(-Symbol_tmp)
saveRDS(DT3, "security_ticker_exchange.RDS")
rm(DT)
rm(DT2)
gc()
detach("data.table")                                  # detaching the package
detach("package:data.table", unload=TRUE)
remove.packages("data.table")                         # First remove the current version
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
library(data.table)
library(data.table)
data.table::fwrite(DT3, "security_ticker_exchange_with_symbols.csv")
con <- dbConnect(RMySQL::MySQL(),  default.file = "~/.my.cnf", group = "local_intel")
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),  default.file = "~/.my.cnf", group = "local_intel")
class(DT3$REPORT_DATE)
DT3 <- DT3[, ReportingDate := as.Date(REPORT_DATE)]
library(data.table)
library(bit64)
DT <- fread("~/R_workspaces/AI_Targetting/own_13f_holdings_hist_1.txt", sep = "|")
DT$REPORT_DATE <- as.Date(DT$REPORT_DATE)
sec_ticker_exchange <- fread("~/R_workspaces/AI_Targetting/Data from Rob/h_security_ticker_exchange.txt", "|")
#dbWriteTable(con, "sec_ticker_exchange", sec_ticker_exchange)
DT2 <- dplyr::left_join(DT,
dplyr::select(sec_ticker_exchange, TICKER_EXCHANGE, FREF_SECURITY_TYPE, FS_PERM_SEC_ID),
by = "FS_PERM_SEC_ID")
DT2 <- DT2 %>% dplyr::rowwise() %>%
dplyr::mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
strsplit(TICKER_EXCHANGE, split = "-")[[1]],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp),
strsplit(Symbol_tmp, split = ".")[[1]],
Symbol_tmp)) %>%
dplyr::ungroup() %>% dplyr::select(-Symbol_tmp)
# Writting results to disk using fwrite
# https://www.r-bloggers.com/fast-csv-writing-for-r/
#detach("package:data.table", unload=TRUE)             # detaching the package
#remove.packages("data.table")                         # First remove the current version
#install.packages("data.table", type = "source",
#                 repos = "http://Rdatatable.github.io/data.table") # Then install devel version
data.table::fwrite(DT2, "security_ticker_exchange_with_symbols.csv")
#DT3 <- DT3[, ReportingDate := as.Date(REPORT_DATE)]
dbWriteTable(con, "Inst_Holdings_hist_w_symbols", DT2)
symbol_SIC_Groups <- read_csv("~/R_workspaces/AI_Targetting/Data from Rob/symbolSICGroups.csv")
names(symbol_SIC_Groups)[-1] <- paste0("SIC_", names(symbol_SIC_Groups)[-1])
DT3 <- dplyr::left_join(DT2, symbol_SIC_Groups, by = "Symbol")
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),  default.file = "~/.my.cnf", group = "local_intel")
dbWriteTable(con, "Inst_Holdings_hist_w_symbols", DT2)
symbol_SIC_Groups <- readr::read_csv("~/R_workspaces/AI_Targetting/Data from Rob/symbolSICGroups.csv")
names(symbol_SIC_Groups)[-1] <- paste0("SIC_", names(symbol_SIC_Groups)[-1])
DT3 <- dplyr::left_join(DT2, symbol_SIC_Groups, by = "Symbol")
View(DT3)
head(DT2)
DT2 <- dplyr::left_join(DT,
dplyr::select(sec_ticker_exchange, TICKER_EXCHANGE, FREF_SECURITY_TYPE, FS_PERM_SEC_ID),
by = "FS_PERM_SEC_ID")
tt <- DT2[1:10000] %>% dplyr::rowwise() %>%
dplyr::mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
strsplit(TICKER_EXCHANGE, split = "-")[[1]],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp,fixed = TRUE),
strsplit(Symbol_tmp, split = ".")[[1]],
Symbol_tmp)) %>%
dplyr::ungroup() %>% dplyr::select(-Symbol_tmp)
tt <- DT2[1:10000,] %>% dplyr::rowwise() %>%
dplyr::mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
strsplit(TICKER_EXCHANGE, split = "-")[[1]],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp,fixed = TRUE),
strsplit(Symbol_tmp, split = ".")[[1]],
Symbol_tmp)) %>%
dplyr::ungroup() %>% dplyr::select(-Symbol_tmp)
View(tt)
tt2 <- "FDC.XX2-NYS"
grepl(pattern = "-", x = tt2)
tt3 <- strsplit(tt2, split = "-")[[1]]
tt3
tt3 <- strsplit(tt2, split = "-")[1]
tt3
tt3 <- strsplit(tt2, split = "-")
tt3
tt3 <- unlist(strsplit(tt2, split = "-"))[1]
tt3
class(tt3)
tt <- DT2[1:10000,] %>% dplyr::rowwise() %>%
dplyr::mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
unlist(strsplit(TICKER_EXCHANGE, split = "-", fixed = TRUE))[1],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp,fixed = TRUE),
unlist(strsplit(Symbol_tmp, split = ".", fixed = TRUE))[1],
Symbol_tmp)) %>%
dplyr::ungroup() %>% dplyr::select(-Symbol_tmp)
View(tt)
rm(tt)
rm(tt2)
rm(tt3)
library(dplyr)
library(multidplyr)
cluster <- create_cluster(7)
set_default_cluster(cluster)
DT3 <- DT2 %>% partition() %>%
mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
unlist(strsplit(TICKER_EXCHANGE, split = "-", fixed = TRUE))[1],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp,fixed = TRUE),
unlist(strsplit(Symbol_tmp, split = ".", fixed = TRUE))[1],
Symbol_tmp)) %>%
collect()
View(DT3)
DT3
DT3 <- DT2 %>% partition() %>% rowwise() %>%
mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
unlist(strsplit(TICKER_EXCHANGE, split = "-", fixed = TRUE))[1],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp,fixed = TRUE),
unlist(strsplit(Symbol_tmp, split = ".", fixed = TRUE))[1],
Symbol_tmp)) %>%
collect()
detach("package:dplyr", unload=TRUE)
detach("package:multidplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.3")
detach("package:dplyr", unload=TRUE)
library(data.table)
DT3 <- DT2 %>% dplyr::rowwise() %>%
dplyr::mutate(Symbol_tmp = ifelse(grepl(pattern = "-", x = TICKER_EXCHANGE),
unlist(strsplit(TICKER_EXCHANGE, split = "-", fixed = TRUE))[1],
TICKER_EXCHANGE),
Symbol = ifelse(grepl(pattern = ".", x = Symbol_tmp,fixed = TRUE),
unlist(strsplit(Symbol_tmp, split = ".", fixed = TRUE))[1],
Symbol_tmp)) %>%
dplyr::ungroup() %>% dplyr::select(-Symbol_tmp)
View(DT3)
data.table::fwrite(DT3, "security_ticker_exchange_with_symbols.csv")
symbol_SIC_Groups <- readr::read_csv("~/R_workspaces/AI_Targetting/Data from Rob/symbolSICGroups.csv")
names(symbol_SIC_Groups)[-1] <- paste0("SIC_", names(symbol_SIC_Groups)[-1])
DT4 <- dplyr::left_join(DT3, symbol_SIC_Groups, by = "Symbol")
View(DT4)
tt <- dplyr::filter(DT4, is.na(SIC_Group1))
View(tt)
length(unique(tt$TICKER_EXCHANGE))
length(unique(tt$Symbol))
View(symbol_SIC_Groups)
names(DT3)
dbWriteTable(con, "Inst_Holdings_hist_w_symbols", DT3)
tt <- DT2[1:1000,]
ttt <- dplyr::filter(DT4, is.na(SIC_Group1), grepl(pattern = "(-NYS)|(-NAS)", x = TICKER_EXCHANGE) )
View(ttt)
View(symbol_SIC_Groups)
length(unique(ttt$TICKER_EXCHANGE))
ttt2 <- dplyr::filter(DT4, !is.na(SIC_Group1), grepl(pattern = "(-NYS)|(-NAS)", x = TICKER_EXCHANGE) )
length(unique(ttt2$Symbol))
length(unique(ttt2$TICKER_EXCHANGE))
rm(data.set3)
rm(tt)
rm(ttt)
rm(ttt2)
rm(Training_data_regression)
rm(Test_data_regression)
own_basic <- fread("~/R_workspaces/AI_Targetting/Data from Rob/own_basic.txt", "|")
edm_standard_entity <- fread("~/R_workspaces/AI_Targetting/Data from Rob/edm_standard_entity.txt", "|")
View(own_basic)
names(own_basic)
names(DT3)
names(edm_standard_entity)
View(edm_standard_entity)
DT4 <- dplyr::left_join(DT3,
dplyr::select(own_basic, FS_PERM_SEC_ID, Company = FACTSET_ENTITY_ID, ISSUE_TYPE, CAP_GROUP),
by = "FS_PERM_SEC_ID")
View(DT4)
DT5 <- dplyr::left_join(DT4,
dplyr::select(edm_standard_entity, PRIMARY_SIC_CODE, Company = FACTSET_ENTITY_ID,
PRIMARY_SIC_CODE, INDUSTRY_CODE, SECTOR_CODE),
by = "Company")
View(DT5)
help(memory.size)
memory.size()
View(DT5)
rm(DT)
View(DT5)
rm(symbol_SIC_Groups)
saveRDS(DT5, "own_inst_enriched.RDS")
gc()
ls()
library(data.table)
library(bit64)
library(data.table)
library(bit64)
DT1.1 <- fread("~/R_workspaces/AI_Targetting/own_fund/own_fund_holdings_hist_1.txt", sep = "|")
sec_ticker_exchange <- fread("~/R_workspaces/AI_Targetting/Data from Rob/h_security_ticker_exchange.txt", "|")
DT2.1 <- dplyr::left_join(DT1.1,
dplyr::select(sec_ticker_exchange, TICKER_EXCHANGE, FREF_SECURITY_TYPE, FS_PERM_SEC_ID),
by = "FS_PERM_SEC_ID")
