SharkPositions_good <- data.set <- dplyr::semi_join(SharkPositions, good_symbols_list, by = "Symbol")
data_path <- "~/Data/Fundamentals_9_17_2016/fundamentals_9_17_2016"
files <- dir(path = data_path, pattern = "_Request")
data.set <- dbReadTable(con, "SharkPositions_good") %>% dplyr::mutate(Date = as.Date(Date))
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
for(t in tbls_list[1:10]) {
# Verbose msg
counter <<- counter + 1
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
gc()
}
Positions_dates <- sort(unique(SharkPositions$Date))
data.set <- dbReadTable(con, "SharkPositions_good") %>% dplyr::mutate(Date = as.Date(Date))
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
for(t in tbls_list[1:10]) {
# Verbose msg
counter <<- counter + 1
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
gc()
}
gc()
pryr::mem_used()
save.image("WorkSpace_1tmp.RData")
pryr::mem_used()
for(i in 1:10){
gc()
sleep(0.5)
}
for(i in 1:10){
gc()
Sys.sleep(0.5)
}
pryr::mem_used()
gc()
pryr::mem_used()
Positions_dates <- sort(unique(SharkPositions$Date))
good_symbols_list <- dplyr::filter(transaction_per_symbol_per_year, Count <= 4) %>% dplyr::distinct()
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(), default.file = .rmysql.settingsfile, group = "local_intel")
SharkPositions_good <- data.set <- dplyr::semi_join(SharkPositions, good_symbols_list, by = "Symbol")
data_path <- "~/Data/Fundamentals_9_17_2016/fundamentals_9_17_2016"
saveRDS(data.set, file = "DataSet.rds")
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
for(t in tbls_list[1:8]) {
# Verbose msg
counter <<- counter + 1
data.set <<- readRDS(DataSet.rds)
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
rm(data.set)
gc()
}
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
for(t in tbls_list[1:8]) {
# Verbose msg
counter <<- counter + 1
data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
rm(data.set)
gc()
}
pryr::mem_used()
counter
for(t in tbls_list[9:17]) {
# Verbose msg
counter <<- counter + 1
data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
rm(data.set)
gc()
}
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(), default.file = .rmysql.settingsfile, group = "local_intel")
dbListTables(con)
dbWriteTable(con, "SharkPositions", SharkPositions)
Positions_dates <- sort(unique(SharkPositions$Date))
good_symbols_list <- dplyr::filter(transaction_per_symbol_per_year, Count <= 4) %>% dplyr::distinct()
SharkPositions_good <- data.set <- dplyr::semi_join(SharkPositions, good_symbols_list, by = "Symbol")
data_path <- "~/Data/Fundamentals_9_17_2016/fundamentals_9_17_2016"
files <- dir(path = data_path, pattern = "_Request")
pryr::mem_used()
counter <- 0
tbls_list <- dbListTables(con)
saveRDS(data.set, file = "DataSet.rds")
for(t in tbls_list[1:9]) {
# Verbose msg
counter <<- counter + 1
data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
rm(data.set)
gc()
}
Positions_dates <- sort(unique(SharkPositions$Date))
good_symbols_list <- dplyr::filter(transaction_per_symbol_per_year, Count <= 4) %>% dplyr::distinct()
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(), default.file = .rmysql.settingsfile, group = "local_intel")
SharkPositions_good <- data.set <- dplyr::semi_join(SharkPositions, good_symbols_list, by = "Symbol")
tbls_list <- dbListTables(con)
for(t in tbls_list[10:19]) {
# Verbose msg
counter <<- counter + 1
data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
rm(data.set)
gc()
}
counter <- 9
pryr::mem_used()
for(t in tbls_list[10:19]) {
# Verbose msg
counter <<- counter + 1
data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>% dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))]))
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
saveRDS(data.set, file = "DataSet.rds")
rm(data.X)
rm(data.set)
gc()
}
pryr::mem_used()
data.set <<- readRDS("DataSet.rds")
pryr::mem_used()
View(data.set)
NROW(SharkPositions)
NROW(data.set)
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),  default.file = "~/.my.cnf", group = "local_intel")
dbListTables(con)
dbListTables(con)
data.set <- dbReadTable(con, "SharkPositions_good") %>% dplyr::mutate(Date = as.Date(Date))
# saveRDS(data.set, file = "DataSet.rds")
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
for(t in tbls_list) {
# Verbose msg
counter <<- counter + 1
#data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good", "SharkPositions" , "SharkPositions_good" , "data_set")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>%
dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))])) %>%
dplyr::ungroup() %>%
# Keeping only 1 data point per symbol per Position Date
dplyr::arrange(Symbol, desc(Date)) %>%
dplyr::distinct(Symbol, Next_Pos_date, .keep_all = TRUE)
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
#saveRDS(data.set, file = "DataSet.rds")
names(data.set)
rm(data.X)
gc()
}
data.set <- data.set %>% dplyr::arrange(Symbol, Date)
Positions_dates <- sort(unique(SharkPositions$Date))
data.set <- dbReadTable(con, "SharkPositions_good") %>% dplyr::mutate(Date = as.Date(Date))
# saveRDS(data.set, file = "DataSet.rds")
tbls_list <- dbListTables(con)
counter <- 0
pryr::mem_used()
for(t in tbls_list) {
# Verbose msg
counter <<- counter + 1
#data.set <<- readRDS("DataSet.rds")
message(paste0("Processing table number: ", counter, ". TableName/Fundamental data: ", t, ". Memory used: ", pryr::mem_used()))
# Looping through all the tables in the db excluding the sharkpositions table
if (t %in% c("sharkpositions", "sharkpositions_good", "SharkPositions" , "SharkPositions_good" , "data_set")) next
data.X <- dbReadTable(con, t) %>% dplyr::mutate(Date = as.Date(Date)) %>%
dplyr::rowwise() %>%
dplyr::mutate(Next_Pos_date = suppressWarnings(Positions_dates[min(which(Positions_dates > Date))])) %>%
dplyr::ungroup() %>%
# Keeping only 1 data point per symbol per Position Date
dplyr::arrange(Symbol, desc(Date)) %>%
dplyr::distinct(Symbol, Next_Pos_date, .keep_all = TRUE)
# Renaming the variable before adding them to the data_set
names(data.X)[which(names(data.X) == "Date")] <- paste0("Date_", t)
if(NCOL(data.X) > 3) names(data.X)[which(names(data.X) == "Value")] <- t
# Constructing the dataset
data.set <<- dplyr::left_join(data.set, data.X, by = c("Symbol", "Date" = "Next_Pos_date"))
#saveRDS(data.set, file = "DataSet.rds")
names(data.set)
rm(data.X)
gc()
}
data.set <- data.set %>% dplyr::arrange(Symbol, Date)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)))
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(.,-row_names.x, -row_names.y))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(.,-row_names.x, -row_names.y, -row_names.z))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(.,-row_names.x, -row_names.y))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), # -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.))) %>%
try(dplyr::select(-row_names.x, -row_names.y))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), -row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), #-row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "row_names.", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), #-row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "row_names..", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)), #-row_names.x, -row_names.y,
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "roww_names.", x = names(.)))
names(data.set2)
data.set2 <- data.set %>% dplyr::mutate(Position_normalized = Position/NumberHolders,
Position_percent = Position_normalized/SharesOutstanding) %>%
dplyr::group_by(Symbol) %>% dplyr::mutate(lag_Position_normalized = lag(Position_normalized),
Position_normalized_change = Position_normalized - lag_Position_normalized,
lag_Position_percent = lag(Position_percent),
Position_percent_change = Position_percent - lag_Position_percent,
lag_Position = lag(Position),
Position_change =  Position - lag_Position) %>%
dplyr::ungroup() %>%
dplyr::select(-grep(pattern = "Date_", x = names(.)),
-grep(pattern = "lag_", x = names(.)),
-grep(pattern = "row_names.", x = names(.)))
dbWriteTable(con, "data_set", data.set2)
dbWriteTable(con, "data_set", data.set2, overwrite = TRUE)
data.set2 <- dbReadTable(con, "data_set")
data.set3 <- na.omit(data.set2)
Test_years <- c(2015)
Training_years <- c(2008:2014)
regression_data <- data.set3[,c(59,1,3,9:54)] %>%
dplyr::filter(Year %in% Training_years) %>%
dplyr::select(-Symbol, -Date, -Year)
save.image("~/R_workspaces/AI_Targetting/Workspace_01.RData")
library(HighDimOut)
getDoParWorkers()
foreach::getDoParWorkers()
foreach::getDoParWorkers()
load("~/R_workspaces/AI_Targetting/Workspace_02_RegressionReady.RData")
context_var <- c(#"Symbol", "Year",  "Date",
"HasOptions", "SharkGrouping", "NumberHolders", "SharesOutstanding", "FSPermSecId")
Y_var_potential <- grep(pattern = "Position", x = names(data.set3), value = TRUE)
Y_var <- "Position_change"
X_var <-  setdiff(names(data.set3),
union(Y_var_potential, context_var))
# Identification of Training & Testing data set ------
# Random Sample vs Specific years for training set
RANDOM_TRAINING <- FALSE
FRACTION_TRAINING <- 0.75
if(RANDOM_TRAINING == TRUE) {
n_samples <- floor(NROW(data.set3) * FRACTION_TRAINING)
sample_ids <- sample.int(n = NROW(data.set3), size = n_samples, replace = FALSE)
Training_data_regression <- data.set3[sample_ids , c(Y_var, X_var)]
Test_data_regression     <- data.set3[-sample_ids, c(Y_var, X_var)]
} else {
# Splitting training/Testing
Years_dataset <- as.numeric(sort(unique(data.set3$Year)))
Test_years <- c(2015)
Training_years <- setdiff(Years_dataset, Test_years)
Training_data_regression <- dplyr::filter(data.set3, Year %in% Training_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
Test_data_regression <- dplyr::filter(data.set3, Year %in% Test_years) %>%
dplyr::select_(.dots = c(Y_var, X_var))
}
library(HighDimOut)
my_func <- function(x) {
print(unique(x$Year))
browser()
data_tmp <- x[, names(x) %in% c("Date", "Year", "Symbol")] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
names(data_tmp)
my_func <- function(x) {
print(unique(x$Year))
browser()
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
my_func <- function(x) {
print(unique(x$Year))
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
foreach::getDoParWorkers()
doParallel::registerDoParallel(cores=detectCores() - 1L)
doParallel::registerDoParallel(cores=Parallel::detectCores() - 1L)
doParallel::registerDoParallel(cores=parallel::detectCores() - 1L)
foreach::getDoParWorkers()
my_func <- function(x) {
print(unique(x$Year))
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.2)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
my_func <- function(x) {
print(unique(x$Year))
data_tmp <- x[, !(names(x) %in% c("Date", "Year", "Symbol"))] %>% as.data.frame()
scaled_data <- scale(x = data_tmp, center = TRUE, scale = TRUE) %>% as.data.frame()
res.ABOD <- Func.ABOD(data=scaled_data, basic=FALSE, perc=0.1)
score.trans.ABOD <- Func.trans(raw.score = score.ABOD, method = "ABOD")
x$ABOD_Score <- score.trans.ABOD
return(x)
}
scanned_data <- data.set3[, c(Y_var, X_var)] %>% # partition() %>%
dplyr::group_by(Year) %>% dplyr::do(res = my_func(.))
